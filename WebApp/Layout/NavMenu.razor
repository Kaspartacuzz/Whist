@using Core
@using WebApp.Components
@inject Service.AuthServices.IAuthService AuthService
@inject NavigationManager NavigationManager

<nav class="navbar navbar-expand-lg navbar-light bg-light px-4">

    <div class="collapse navbar-collapse">
        <ul class="navbar-nav">
            <li class="nav-item"><NavLink class="nav-link" href="">Forside</NavLink></li>
            @if (_currentUser is not null)
            {
                <li class="nav-item"><NavLink class="nav-link" href="FinePage">Bøder</NavLink></li>
            }
            <li class="nav-item"><NavLink class="nav-link" href="HighlightPage">Highlights</NavLink></li>
            <li class="nav-item"><NavLink class="nav-link" href="users">Medlemmer</NavLink></li>
            <li class="nav-item"><NavLink class="nav-link" href="RulesPage">Regler</NavLink></li>
            <li class="nav-item"><NavLink class="nav-link" href="WhistSchemePage">Skema</NavLink></li>
        </ul>

        <button class="btn btn-outline-primary ms-auto" @onclick="ToggleLogin">
            @(_currentUser is null ? "Log ind" : "Log ud")
        </button>
    </div>

    <LoginComponent @ref="_loginComponent" OnLoginSuccess="HandleLoginSuccess" />
</nav>

@code {
    private User? _currentUser;
    private LoginComponent? _loginComponent;

    protected override async Task OnInitializedAsync()
    {
        _currentUser = await AuthService.GetCurrentUser();
    }

    private async Task HandleLoginSuccess()
    {
        _currentUser = await AuthService.GetCurrentUser();
        StateHasChanged();
    }

    private async Task ToggleLogin()
    {
        if (_currentUser is null)
        {
            _loginComponent?.Show();
        }
        else
        {
            await AuthService.Logout();
            _currentUser = null;
            NavigationManager.NavigateTo("/");
        }
    }
}