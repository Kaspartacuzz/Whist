@using Core
@using WebApp.Components
@inject Service.AuthServices.IAuthService AuthService
@inject NavigationManager NavigationManager

<!-- LoginModal-komponenten, som vi kan kalde via @ref -->
<LoginComponent @ref="_loginComponent"
                OnLoginSuccess="HandleLogin" />

<nav class="app-nav">
  <div class="nav-container">
    <!-- Logo / Forside til venstre -->
    <div class="nav-logo">
      <NavLink href="" class="logo-link">Forside</NavLink>
    </div>

    <!-- Menulinks centreret -->
    <ul class="nav-links">
      @if (_currentUser is not null)
      {
        <li><NavLink href="FinePage"   class="nav-link">Bøder</NavLink></li>
      }
      <li><NavLink href="HighlightPage" class="nav-link">Highlights</NavLink></li>
      <li><NavLink href="users"         class="nav-link">Medlemmer</NavLink></li>
      <li><NavLink href="RulesPage"     class="nav-link">Regler</NavLink></li>
      <li><NavLink href="WhistSchemePage" class="nav-link">Skema</NavLink></li>
    </ul>

    <!-- Login/Logud-knap til højre -->
    <div class="nav-auth">
      <button class="btn btn-outline-primary" @onclick="ToggleLogin">
        @(_currentUser is null ? "Log ind" : "Log ud")
      </button>
    </div>
  </div>
</nav>

@code {
    private LoginComponent? _loginComponent;
    private User? _currentUser;

    protected override async Task OnInitializedAsync()
    {
        // Prøv at hent evt. eksisterende session
        _currentUser = await AuthService.GetCurrentUser();
    }

    private async Task HandleLogin()
    {
        // Bliver kaldt fra LoginComponent efter succesfuld login
        _currentUser = await AuthService.GetCurrentUser();
        StateHasChanged();
    }

    private async Task ToggleLogin()
    {
        if (_currentUser is null)
        {
            // Vis modal hvis ikke logget ind
            _loginComponent?.Show();
        }
        else
        {
            // Log ud
            await AuthService.Logout();
            _currentUser = null;
            NavigationManager.NavigateTo("/");
        }
    }
}
