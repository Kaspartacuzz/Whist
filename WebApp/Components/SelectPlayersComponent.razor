@using Core

@if (true)
{
    <div class="modal-backdrop">
        <div class="modal-container">
            <h3 class="modal-title">
                @if (IsSunMode)
                {
                    <span>Sol-melding: @PointValue point</span>
                }
                else
                {
                    <span>Tildel @PointValue point</span>
                }
            </h3>

            <div class="modal-section">
                <label class="modal-label">@(IsSunMode ? "Vinder (1 spiller)" : "Vinderhold (2 spillere)"):</label>
                @foreach (var player in Players)
                {
                    <div>
                        <input type="checkbox" checked="@player.IsWinner" @onchange="() => ToggleWinner(player)" />
                        @player.Nickname
                    </div>
                }
            </div>

            <div class="modal-section">
                <label class="modal-label">@(IsSunMode ? "Tabere (3 spillere)" : "Taberhold (2 spillere)"):</label>
                @foreach (var player in Players)
                {
                    <div>
                        <input type="checkbox" @bind="player.IsLoser" />
                        @player.Nickname
                    </div>
                }
            </div>

            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div style="color: red; font-size: 0.9rem;">@ErrorMessage</div>
            }

            <div class="modal-actions">
                <button class="modal-btn primary" @onclick="Confirm">Bekræft</button>
                <button class="modal-btn cancel" @onclick="Close">Annuller</button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public int PointValue { get; set; }

    [Parameter] public List<SelectableUser> Players { get; set; } = new();

    [Parameter] public EventCallback<(List<SelectableUser> winners, List<SelectableUser> losers)> OnConfirm { get; set; }

    [Parameter] public EventCallback OnCancel { get; set; }

    [Parameter] public bool IsSunMode { get; set; } = false;

    private string ErrorMessage = "";

    private async Task Confirm()
    {
        var winners = Players.Where(p => p.IsWinner).ToList();
        var losers = Players.Where(p => p.IsLoser).ToList();

        if ((IsSunMode && (winners.Count != 1 || losers.Count != 3)) ||
            (!IsSunMode && (winners.Count != 2 || losers.Count != 2)))
        {
            ErrorMessage = IsSunMode ? "Vælg 1 vinder og 3 tabere." : "Vælg præcis 2 vindere og 2 tabere.";
            return;
        }

        await OnConfirm.InvokeAsync((winners, losers));
    }

    private async Task Close()
    {
        await OnCancel.InvokeAsync();
    }

    public class SelectableUser
    {
        public int Id { get; set; }
        public string Nickname { get; set; } = "";
        public bool IsWinner { get; set; }
        public bool IsLoser { get; set; }
    }
    
    private void ToggleWinner(SelectableUser selected)
    {
        if (selected.IsWinner)
        {
            // Fjern vinderstatus og nulstil alle tabere
            selected.IsWinner = false;
            foreach (var p in Players)
                p.IsLoser = false;
        }
        else
        {
            // Sæt valgt spiller som vinder
            foreach (var p in Players)
                p.IsWinner = false;

            selected.IsWinner = true;

            // Sæt alle andre som tabere
            foreach (var p in Players.Where(p => p != selected))
                p.IsLoser = true;
        }
    }
}
