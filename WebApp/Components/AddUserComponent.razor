@using Core
@using Microsoft.AspNetCore.Components.Forms
@inject Service.IUserService UserService

@if (showModal)
{
    <div style="border: 1px solid gray; background: white; padding: 20px; margin-top: 20px;">
        <h3>@(UserToEdit is null ? "Opret ny bruger" : "Rediger bruger")</h3>

        <input @bind="Name" placeholder="Fulde navn" />
        <br />
        <input @bind="NickName" placeholder="Kaldenavn" />
        <br />
        <input @bind="Email" placeholder="Email" />
        <br />
        <input @bind="Password" placeholder="Kodeord" type="password" />
        <br />
        <input @bind="PhoneNumber" placeholder="Telefonnummer" />
        <br />
        <textarea @bind="Description" placeholder="Beskrivelse"></textarea>
        <br />
        <input @bind="FunFact" placeholder="Fun fact" />
        <br />
        <InputFile OnChange="HandleImageUpload" accept="image/*" />
        <br />
        @if (!string.IsNullOrEmpty(ImagePreview))
        {
            <img src="@ImagePreview" alt="Preview" width="150" />
        }

        <div style="margin-top: 10px;">
            <button @onclick="CreateUser">@(UserToEdit is null ? "Opret bruger" : "Gem Ã¦ndringer")</button>
            <button @onclick="Close">Annuller</button>
        </div>
    </div>
}

@code {
    private bool showModal = false;
    private string Name = "";
    private string NickName = "";
    private string Email = "";
    private string Password = "";
    private string PhoneNumber = "";
    private string Description = "";
    private string FunFact = "";
    private IBrowserFile? UploadedImage;
    private string? ImagePreview;
    private User? UserToEdit = null;
    private string ImageUrl = "";

    [Parameter] public EventCallback OnUserAdded { get; set; }

    public Task Show(User? userToEdit = null)
    {
        UserToEdit = userToEdit;

        if (userToEdit is not null)
        {
            // Udfyld formular med eksisterende brugerdata
            Name = userToEdit.Name;
            Email = userToEdit.Email;
            NickName = userToEdit.NickName;
            Password = userToEdit.Password;
            PhoneNumber = userToEdit.PhoneNumber;
            Description = userToEdit.Description;
            FunFact = userToEdit.FunFact;
            ImageUrl = userToEdit.ImageUrl;
        }
        else
        {
            // Nulstil felter
            Name = "";
            Email = "";
            NickName = "";
            Password = "";
            PhoneNumber = "";
            Description = "";
            FunFact = "";
            ImageUrl = "";
        }

        showModal = true;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void Close()
    {
        showModal = false;
        Name = NickName = Email = Password = PhoneNumber = Description = FunFact = "";
        UploadedImage = null;
        ImagePreview = null;
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        UploadedImage = e.File;
        var buffer = new byte[UploadedImage.Size];
        await UploadedImage.OpenReadStream().ReadAsync(buffer);
        ImagePreview = $"data:{UploadedImage.ContentType};base64,{Convert.ToBase64String(buffer)}";
    }
    
    private async Task CreateUser()
    {
        if (UserToEdit is not null)
        {
            // Rediger eksisterende bruger
            UserToEdit.Name = Name;
            UserToEdit.NickName = NickName;
            UserToEdit.Email = Email;
            UserToEdit.Password = Password;
            UserToEdit.PhoneNumber = PhoneNumber;
            UserToEdit.Description = Description;
            UserToEdit.FunFact = FunFact;
            UserToEdit.ImageUrl = ImagePreview ?? UserToEdit.ImageUrl;

            await UserService.Update(UserToEdit);
        }
        else
        {
            // Opret ny bruger
            var newUser = new User
            {
                Name = Name,
                NickName = NickName,
                Email = Email,
                Password = Password,
                PhoneNumber = PhoneNumber,
                Description = Description,
                FunFact = FunFact,
                ImageUrl = ImagePreview ?? ""
            };

            await UserService.AddUser(newUser);
        }

        await OnUserAdded.InvokeAsync();
        Close();
    }
}