@using System.ComponentModel.DataAnnotations
@using Core
@using Microsoft.AspNetCore.Components.Forms

@inject Service.IUserService UserService
@inject Service.UploadServices.IUploadService UploadService

@if (showModal)
{
    <div class="modal-backdrop">
        <div class="modal-container">
            <h3 class="modal-title">@(UserToEdit is null ? "Opret ny bruger" : "Rediger bruger")</h3>

            <input @bind="Name" placeholder="Fulde navn" class="modal-input" maxlength="40"/>
            <input @bind="NickName" placeholder="Kaldenavn" class="modal-input" maxlength="30"/>
            <input @bind="Email" placeholder="Email" class="modal-input" maxlength="100" type="email"/>
            <input @bind="Password" placeholder="Kodeord" type="password" class="modal-input" maxlength="100"/>
            <input @bind="Address" placeholder="Adresse" class="modal-input" maxlength="200"/>
            <input @bind="PhoneNumber" placeholder="Telefonnummer" class="modal-input" maxlength="8" type="tel"/>
            <textarea @bind="Description" placeholder="Beskrivelse" class="modal-textarea" minlength="8" maxlength="500"></textarea>
            <input @bind="FunFact" placeholder="Fun fact" class="modal-input" maxlength="200"/>

            <label for="file-upload" class="custom-file-label">üì∑ Vedh√¶ft billede</label>
            <div class="file-input-wrapper">
                <InputFile id="file-upload" OnChange="HandleImageUpload" accept="image/*" />
            </div>

            @if (!string.IsNullOrEmpty(ImagePreview))
            {
                <img src="@ImagePreview" alt="Preview" class="modal-image-preview" />
            }
            
            @if (!string.IsNullOrWhiteSpace(ValidationErrorMessage))
            {
                <div style="color: red; font-size: 0.9rem;">@ValidationErrorMessage</div>
            }

            <div class="modal-actions">
                <button class="modal-btn primary" @onclick="CreateUser">
                    @(UserToEdit is null ? "Opret bruger" : "Gem √¶ndringer")
                </button>
                <button class="modal-btn cancel" @onclick="Close">Annuller</button>
            </div>
        </div>
    </div>
}

@code {
    private bool showModal = false;
    private string Name = "";
    private string NickName = "";
    private string Email = "";
    private string Password = "";
    private string Address = "";
    private string PhoneNumber = "";
    private string Description = "";
    private string FunFact = "";
    private IBrowserFile? UploadedImage;
    private string? ImagePreview;
    private User? UserToEdit = null;
    private string ImageUrl = "";
    private string? UploadErrorMessage = null;
    private string? ValidationErrorMessage = null;

    [Parameter] public EventCallback OnUserAdded { get; set; }

    public Task Show(User? userToEdit = null)
    {
        ValidationErrorMessage = null;

        UserToEdit = userToEdit;

        if (userToEdit is not null)
        {
            // Udfyld formular med eksisterende brugerdata
            Name = userToEdit.Name;
            Email = userToEdit.Email;
            NickName = userToEdit.NickName;
            Password = userToEdit.Password;
            Address = userToEdit.Address;
            PhoneNumber = userToEdit.PhoneNumber;
            Description = userToEdit.Description;
            FunFact = userToEdit.FunFact;
            ImageUrl = userToEdit.ImageUrl;
        }
        else
        {
            // Nulstil felter
            Name = "";
            Email = "";
            NickName = "";
            Password = "";
            Address = "";
            PhoneNumber = "";
            Description = "";
            FunFact = "";
            ImageUrl = "";
        }

        showModal = true;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void Close()
    {
        showModal = false;
        Name = NickName = Email = Password = PhoneNumber = Description = FunFact = "";
        UploadedImage = null;
        ImagePreview = null;
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        UploadedImage = e.File;
        UploadErrorMessage = null;

        try
        {
            var resultUrl = await UploadService.UploadImageAsync(UploadedImage);
            if (!string.IsNullOrEmpty(resultUrl))
            {
                ImagePreview = resultUrl;
            }
            else
            {
                UploadErrorMessage = "Upload mislykkedes. Pr√∏v igen.";
            }
        }
        catch (Exception ex)
        {
            UploadErrorMessage = "Fejl under upload: " + ex.Message;
        }
    }
    
    private async Task CreateUser()
    {
        ValidationErrorMessage = null;

        // Manuelle tjek
        if (string.IsNullOrWhiteSpace(Name) || Name.Length > 40)
        {
            ValidationErrorMessage = "Navn er p√•kr√¶vet.";
            return;
        }
        
        if (string.IsNullOrWhiteSpace(NickName))
        {
            ValidationErrorMessage = "Kaldenavn er p√•kr√¶vet.";
            return;
        }
        
        if (Name.Length > 40)
        {
            ValidationErrorMessage = "Navn navnet m√• h√∏jst v√¶re 40 tegn.";
            return;
        }

        if (string.IsNullOrWhiteSpace(Email) || !new EmailAddressAttribute().IsValid(Email))
        {
            ValidationErrorMessage = "Ugyldig eller tom emailadresse.";
            return;
        }

        if (string.IsNullOrWhiteSpace(Password) || Password.Length < 6)
        {
            ValidationErrorMessage = "Kodeord er p√•kr√¶vet og skal v√¶re mindst 6 tegn.";
            return;
        }
        
        if (string.IsNullOrWhiteSpace(Address))
        {
            ValidationErrorMessage = "Adresse skal udfyldes.";
            return;
        }

        if (string.IsNullOrWhiteSpace(PhoneNumber))
        {
            ValidationErrorMessage = "Telefonnummer skal udfyldes.";
            return;
        }
        else if (!new PhoneAttribute().IsValid(PhoneNumber) || PhoneNumber.Length < 8 || PhoneNumber.Length > 8)
        {
            ValidationErrorMessage = "Ugyldigt telefonnummer.";
            return;
        }

        
        if (UserToEdit is not null)
        {
            // Rediger eksisterende bruger
            UserToEdit.Name = Name;
            UserToEdit.NickName = NickName;
            UserToEdit.Email = Email;
            UserToEdit.Password = Password;
            UserToEdit.Address = Address;
            UserToEdit.PhoneNumber = PhoneNumber;
            UserToEdit.Description = Description;
            UserToEdit.FunFact = FunFact;
            UserToEdit.ImageUrl = ImagePreview ?? UserToEdit.ImageUrl;

            await UserService.Update(UserToEdit);
        }
        else
        {
            // Opret ny bruger
            var newUser = new User
            {
                Name = Name,
                NickName = NickName,
                Email = Email,
                Password = Password,
                Address = Address,
                PhoneNumber = PhoneNumber,
                Description = Description,
                FunFact = FunFact,
                ImageUrl = ImagePreview ?? ""
            };

            await UserService.AddUser(newUser);
        }

        await OnUserAdded.InvokeAsync();
        Close();
    }
}