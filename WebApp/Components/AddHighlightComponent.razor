@using Core
@using Microsoft.AspNetCore.Components.Forms

@inject Service.HighlightServices.IHighlightService HighlightService
@inject Service.AuthServices.IAuthService AuthService

@if (showModal)
{
    <div class="modal-backdrop">
        <div class="modal-container">
            <h3 class="modal-title">@(HighlightToEdit is null ? "Opret nyt highlight" : "Rediger highlight")</h3>

            <input @bind="Title" placeholder="Titel" class="modal-input" maxlength="80"/>

            <textarea @bind="Description" placeholder="Beskrivelse" class="modal-textarea" maxlength="400"></textarea>

            <label for="file-upload" class="custom-file-label">üì∑ Vedh√¶ft billede</label>
            <div class="file-input-wrapper">
                <InputFile id="file-upload" OnChange="HandleImageUpload" accept="image/*" />
            </div>

            @if (!string.IsNullOrEmpty(ImagePreview))
            {
                <img src="@ImagePreview" alt="Preview" class="modal-image-preview" />
            }

            <label class="modal-checkbox">
                <input type="checkbox" @bind="IsPrivate" />
                G√∏r privat (kun synlig for medlemmer)
            </label>

            <div class="modal-actions">
                <button class="modal-btn primary" @onclick="CreateHighlight">
                    @(HighlightToEdit is null ? "Opret highlight" : "Gem √¶ndringer")
                </button>
                <button class="modal-btn cancel" @onclick="Close">Annuller</button>
            </div>
        </div>
    </div>
}

@code {
    private bool showModal = false;
    private string Title = "";
    private string Description = "";
    private IBrowserFile? UploadedImage;
    private string? ImagePreview;
    private bool IsPrivate = false;
    private string? UploadErrorMessage = null;

    [Parameter] public EventCallback OnHighlightAdded { get; set; }
    [Parameter] public Highlight? HighlightToEdit { get; set; }

    public void Show(Highlight? highlight = null)
    {
        HighlightToEdit = highlight;
        if (HighlightToEdit is not null)
        {
            Title = HighlightToEdit.Title;
            Description = HighlightToEdit.Description;
            ImagePreview = HighlightToEdit.ImageUrl;
        }
        else
        {
            Title = "";
            Description = "";
            UploadedImage = null;
            ImagePreview = null;
        }

        showModal = true;
        StateHasChanged();
    }

    private void Close()
    {
        showModal = false;
        Title = "";
        Description = "";
        UploadedImage = null;
        ImagePreview = null;
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        UploadedImage = e.File;
        var buffer = new byte[UploadedImage.Size];
        try
        {
            using var stream = UploadedImage.OpenReadStream(maxAllowedSize: 10_000_000); // 10 MB
            await stream.ReadAsync(buffer);
            ImagePreview = $"data:{UploadedImage.ContentType};base64,{Convert.ToBase64String(buffer)}";
        }
        catch (Exception ex)
        {
            ImagePreview = null;
            UploadErrorMessage = "Billedet kunne ikke l√¶ses. Pr√∏v et andet format eller en mindre fil.";
            Console.WriteLine("Fejl ved billedupload: " + ex.Message);
        }

        ImagePreview = $"data:{UploadedImage.ContentType};base64,{Convert.ToBase64String(buffer)}";
    }

    private async Task CreateHighlight()
    {
        var user = await AuthService.GetCurrentUser();
        if (user is null) return;

        if (HighlightToEdit is not null)
        {
            // Redig√©r eksisterende highlight
            HighlightToEdit.Title = Title;
            HighlightToEdit.Description = Description;
            HighlightToEdit.ImageUrl = ImagePreview ?? HighlightToEdit.ImageUrl;
            HighlightToEdit.IsPrivate = IsPrivate;

            await HighlightService.Update(HighlightToEdit);
        }
        else
        {
            // Opret nyt highlight
            var newHighlight = new Highlight
            {
                Title = Title,
                Description = Description,
                UserId = user.Id,
                ImageUrl = ImagePreview ?? "",
                Date = DateTime.Now,
                IsPrivate = IsPrivate
            };

            await HighlightService.Add(newHighlight);
        }

        await OnHighlightAdded.InvokeAsync();
        Close();
    }
}
