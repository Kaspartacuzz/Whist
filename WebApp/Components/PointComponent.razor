@page "/point"
@using Core
@using WebApp.Service
@using WebApp.Service.FineServices
@using WebApp.Service.PointServices
@inject IPointService PointService
@inject IUserService UserService
@inject IFineService FineService 

<h3 class="whist-point-title">Whist Point Skema</h3>

<table class="point-table">
    <thead>
    <tr>
        <th>Melding</th>
        @for (int i = 0; i < Columns.Count; i++)
        {
            <th class="@GetHeaderClass(i)">@Columns[i]</th>
        }
    </tr>
    </thead>
    
    <tbody>
    @foreach (var row in GridRows)
    {
        <tr>
            <th class="cell-blue @GetIntensityFromLabel(row.Label)">
                @row.Label
            </th>
            
            @for (int i = 0; i < row.Points.Count; i++)
            {
                var value = row.Points[i];
                <td class="@GetCellClass(value, i, row.Label)" @onclick="() => OnPointClick(value)">
                    @((value.HasValue && value.Value > 0) ? value.Value.ToString() : "")
                </td>
            }
        </tr>
    }
    </tbody>
</table>

<div class="below-tables-container">
    <div class="sun-scheme">
        <div class="top-bar">
            <h4>Sol-meldinger</h4>
            </div>
        <SunSchemeComponent
            PointsChanged="LoadPoints"/>
    </div>
    <div class="point-summary">
        <div class="top-bar">
            <h4>Pointoversigt</h4>
            <button class="btn-add" @onclick="ResetPointsAndCreateFines"
                    style="margin: .5rem 0; padding: .4rem .8rem;">+ Tilføj bøder</button>
        </div>
        <table class="point-overview-table">
            <thead>
            <tr>
                <th>Spiller</th>
                <th>Point</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var row in PlayerNames
                          .Select(kvp => new {
                              Id = kvp.Key,
                              Name = kvp.Value,
                              Total = (PlayerTotals != null && PlayerTotals.TryGetValue(kvp.Key, out var t)) ? t : 0
                          })
                          .OrderByDescending(x => x.Total)   // behold “flest point først”
                          .ThenBy(x => x.Name))              // pæn stabil sortering
            {
                var cssClass = row.Total > 0 ? "positive" : row.Total < 0 ? "negative" : "";
                <tr>
                    <td>@row.Name</td>
                    <td class="@cssClass">@row.Total</td>
                </tr>
            }
            </tbody>
        </table>
    </div>
</div>

@if (IsModalOpen)
{
    <SelectPlayersComponent
        PointValue="@SelectedPoint"
        Players="@Players"
        OnConfirm="HandlePointSubmission"
        OnCancel="() => IsModalOpen = false" />
}


@code {
    private List<PointEntry> AllPoints = new();
    private Dictionary<int, int> PlayerTotals = new(); // PlayerId → Total
    private Dictionary<int, string> PlayerNames = new(); // PlayerId → NickName
    
    protected override async Task OnInitializedAsync()
    {
        await LoadPoints();
    }
    
    private async Task LoadPoints()
    {
        var points = await PointService.GetAll();
        AllPoints = points;

        var users = await UserService.GetAll();
        PlayerNames = users.ToDictionary(u => u.Id, u => u.NickName);

        PlayerTotals = AllPoints
            .GroupBy(p => p.PlayerId)
            .ToDictionary(
                g => g.Key,
                g => g.Sum(p => p.Points)
            );
    }
    
    public class GridRow
    {
        public string Label { get; set; } = "";
        public List<int?> Points { get; set; } = new();
    }

    private List<string> Columns = new()
    {
        "-13", "-12", "-11", "-10", "-9", "-8", "-7", "-6", "-5", "-4", "-3", "-2", "-1", "0", "1", "2", "3", "4", "5", "6"
    };

    private List<GridRow> GridRows = new()
    {
        new GridRow { Label = "7 Alm.", Points = new() { null, null, null, null, null, 4, 4, 3, 3, 2, 2, 1, 1, 1, 1, 2, 2, 3, 3, 4 } },
        new GridRow { Label = "7 Vip", Points = new() { null, null, null, null, null, 5, 5, 4, 4, 3, 3, 2, 1, 1, 1, 2, 2, 3, 3, 4} },
        new GridRow { Label = "7 Gode", Points = new() { null, null, null, null, null, 6, 6, 5, 5, 4, 4, 3, 2, 2, 2, 3, 3, 4, 4, 5} },
        new GridRow { Label = "7 Halve", Points = new() { null, null, null, null, null, 8, 8, 7, 6, 5, 5, 4, 3, 2, 2, 3, 4, 5, 6, 7} },

        new GridRow { Label = "8 Alm.", Points = new() { null, null, null, null, 9, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, null} },
        new GridRow { Label = "8 Vip", Points = new() { null, null, null, null, 11, 11, 10, 9, 8, 6, 5, 4, 3, 1, 1, 2, 3, 4, 5, null} },
        new GridRow { Label = "8 Gode", Points = new() { null, null, null, null, 14, 14, 12, 11, 9, 8, 6, 5, 3, 2, 2, 3, 5, 6, 8, null} },
        new GridRow { Label = "8 Halve", Points = new() { null, null, null, null, 16, 16, 14, 12, 10, 8, 6, 5, 3, 2, 2, 4, 6, 8, 10, null} },

        new GridRow { Label = "9 Alm.", Points = new() { null, null, null, 20, 20, 18, 16, 14, 12, 10, 8, 6, 4, 2, 2, 4, 6, 8, null, null} },
        new GridRow { Label = "9 Vip", Points = new() { null, null, null, 25, 25, 23, 20, 18, 15, 13, 10, 8, 5, 3, 3, 5, 8, 10, null, null} },
        new GridRow { Label = "9 Gode", Points = new() { null, null, null, 30, 30, 27, 24, 21, 18, 15, 12, 9, 6, 3, 3, 6, 9, 12, null, null} },
        new GridRow { Label = "9 Halve", Points = new() { null, null, null, 35, 35, 32, 28, 25, 21, 18, 14, 11, 7, 4, 4, 7, 11, 14, null, null} },

        new GridRow { Label = "10 Alm.", Points = new() { null, null, 44, 44, 40, 36, 32, 28, 24, 20, 16, 12, 8, 4, 4, 8, 12, null, null, null} },
        new GridRow { Label = "10 Vip", Points = new() { null, null, 55, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 5, 10, 15, null, null, null} },
        new GridRow { Label = "10 Gode", Points = new() { null, null, 66, 66, 60, 54, 48, 42, 36, 30, 24, 18, 12, 6, 6, 12, 18, null, null, null} },
        new GridRow { Label = "10 Halve", Points = new() { null, null, 77, 77, 70, 63, 56, 49, 42, 35, 28, 21, 14, 7, 7, 14, 21, null, null, null} },

        new GridRow { Label = "11 Alm.", Points = new() { null, 96, 96, 88, 80, 72, 64, 56, 48, 40, 32, 24, 16, 8, 8, 16, null, null, null, null} },
        new GridRow { Label = "11 Vip", Points = new() { null, 120, 120, 110, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 10, 20, null, null, null, null} },
        new GridRow { Label = "11 Gode", Points = new() { null, 144, 144, 132, 120, 108, 96, 84, 72, 60, 48, 36, 24, 12, 12, 24, null, null, null, null} },
        new GridRow { Label = "11 Halve", Points = new() { null, 168, 168, 154, 140, 126, 112, 98, 84, 70, 56, 42, 28, 14, 14, 28, null, null, null, null} },

        new GridRow { Label = "12 Alm.", Points = new() { 208, 208, 192, 176, 160, 144, 128, 112, 96, 80, 64, 48, 32, 16, 16, null, null, null, null, null} },
        new GridRow { Label = "12 Vip", Points = new() { 260, 260, 240, 220, 200, 180, 160, 140, 120, 100, 80, 60, 40, 20, 20, null, null, null, null, null } },
        new GridRow { Label = "12 Gode", Points = new() { 312, 312, 288, 264, 240, 216, 192, 168, 144, 120, 96, 72, 48, 24, 24, null, null, null, null, null} },
        new GridRow { Label = "12 Halve", Points = new() { 364, 364, 336, 308, 280, 252, 224, 196, 168, 140, 112, 84, 56, 28, 28, null, null, null, null, null} },

        new GridRow { Label = "13 Alm.", Points = new() { 448, 448, 416, 384, 352, 320, 288, 256, 224, 192, 160, 128, 96, 64, null, null, null, null, null, null} },
        new GridRow { Label = "13 Vip", Points = new() { 560, 560, 520, 480, 440, 400, 360, 320, 280, 240, 200, 160, 120, 80, null, null, null, null, null, null} },
        new GridRow { Label = "13 Gode", Points = new() { 672, 672, 624, 576, 528, 480, 432, 384, 336, 288, 240, 192, 144, 96, null, null, null, null, null, null} },
        new GridRow { Label = "13 Halve", Points = new() { 784, 784, 728, 672, 616, 560, 504, 448, 392, 336, 280, 224, 168, 112, null, null, null, null, null, null} },
    };

    private bool IsModalOpen = false;
    private int SelectedPoint;
    private List<SelectPlayersComponent.SelectableUser> Players = new(); // Hent fra backend

    private async Task OnPointClick(int? value)
    {
        if (value.HasValue)
        {
            SelectedPoint = value.Value;

            var users = await UserService.GetAll();

            Players = users.Select(u => new SelectPlayersComponent.SelectableUser
            {
                Id = u.Id,
                Nickname = u.NickName
            }).ToList();

            IsModalOpen = true;
        }
    }

   private async Task HandlePointSubmission((List<SelectPlayersComponent.SelectableUser> winners, List<SelectPlayersComponent.SelectableUser> losers) result)
{
    var (winners, losers) = result;
    var date = DateTime.UtcNow;

    // Selfmakker cases first (1v3 or 3v1). 2v2 falls through to the default.
    if (winners.Count == 1 && losers.Count == 3)
    {
        // Selfmakker is the single winner (+3×)
        var self = winners[0];
        await PointService.Add(new PointEntry
        {
            PlayerId = self.Id,
            Points = SelectedPoint * 3,
            Date = date
        });

        foreach (var loser in losers)
        {
            await PointService.Add(new PointEntry
            {
                PlayerId = loser.Id,
                Points = -SelectedPoint,
                Date = date
            });
        }
    }
    else if (winners.Count == 3 && losers.Count == 1)
    {
        // Selfmakker is the single loser (-3×)
        var self = losers[0];
        await PointService.Add(new PointEntry
        {
            PlayerId = self.Id,
            Points = -SelectedPoint * 3,
            Date = date
        });

        foreach (var winner in winners)
        {
            await PointService.Add(new PointEntry
            {
                PlayerId = winner.Id,
                Points = SelectedPoint,
                Date = date
            });
        }
    }
    else
    {
        // Default 2v2 (unchanged)
        foreach (var winner in winners)
        {
            await PointService.Add(new PointEntry
            {
                PlayerId = winner.Id,
                Points = SelectedPoint,
                Date = date
            });
        }

        foreach (var loser in losers)
        {
            await PointService.Add(new PointEntry
            {
                PlayerId = loser.Id,
                Points = -SelectedPoint,
                Date = date
            });
        }
    }

    await LoadPoints();
    IsModalOpen = false;
}

    private string GetCellClass(int? value, int columnIndex, string rowLabel)
    {
        if (!value.HasValue)
            return "cell-empty";

        string color = columnIndex switch
        {
            13 => "cell-yellow",  // "0"
            > 13 => "cell-green", // højre
            _ => "cell-red"       // venstre
        };

        string intensity = GetIntensityFromLabel(rowLabel);

        return $"{color} {intensity}";
    }

    private string GetHeaderClass(int columnIndex)
    {
        if (columnIndex == 13)
            return "cell-yellow";
        if (columnIndex > 13)
            return "cell-green";
        return "cell-red";
    }
    
    private string GetIntensityFromLabel(string label)
    {
        if (label.Contains("Alm.")) return "low";
        if (label.Contains("Vip")) return "medium";
        if (label.Contains("Gode")) return "high";
        if (label.Contains("Halve")) return "very-high";
        return "";
    }
    
    private async Task ResetPointsAndCreateFines()
    {
        // 1) Hent seneste totals (sikkerhed)
        await LoadPoints();

        var now = DateTime.UtcNow;

        // 2) Opret bøder for dem med minus. Split i bidder af max 500 pga Fine.Amount [Range(1..500)]
        foreach (var kv in PlayerTotals)
        {
            var userId = kv.Key;
            var total  = kv.Value;

            if (total < 0)
            {
                var amountRemaining = Math.Abs(total);
                while (amountRemaining > 0)
                {
                    var chunk = Math.Min(500, amountRemaining);

                    await FineService.Add(new Fine
                    {
                        UserId  = userId,
                        Amount  = chunk,                    // kun positive beløb i bøder
                        Comment = "Whist",
                        Date    = now,
                        IsPaid  = false
                    });

                    amountRemaining -= chunk;
                }
            }
        }

        // 3) Slet ALLE points i databasen
        await PointService.DeleteAll(); // kalder api/point/all i din PointService  :contentReference[oaicite:1]{index=1}

        // 4) Opdatér UI (nul totals)
        await LoadPoints();
    }
}
