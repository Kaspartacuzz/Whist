@using Core
@using WebApp.Service
@inject IUserService UserService
@inject Service.FineServices.IFineService FineService

@if (showModal)
{
    <div class="modal-backdrop">
        <div class="modal-container">
            <h3 class="modal-title">@(FineToEdit is null ? "Opret ny bøde" : "Rediger bøde")</h3>

            @if (FineToEdit is null)
            {
                <select @bind="SelectedUserId" class="modal-input">
                    <option value="0">Vælg bruger</option>
                    @foreach (var user in Users)
                    {
                        <option value="@user.Id">@user.NickName</option>
                    }
                </select>
            }

            <label for="amount" class="modal-label">Beløb</label>
            <input id="amount" type="number" class="modal-input" @bind="Amount" min="0" max="500"/>
            <input type="text" @bind="Comment" placeholder="Kommentar" class="modal-input" maxlength="400"/>

            @if (!string.IsNullOrWhiteSpace(ValidationErrorMessage))
            {
                <div style="color: red; font-size: 0.9rem;">@ValidationErrorMessage</div>
            }
            
            <div class="modal-actions">
                <button class="modal-btn primary" @onclick="Submit">
                    @(FineToEdit is null ? "Tilføj bøde" : "Gem ændringer")
                </button>
                <button class="modal-btn cancel" @onclick="Close">Annuller</button>
            </div>
        </div>
    </div>
}

@code {
    private bool showModal = false;
    private int SelectedUserId = 0;
    private decimal Amount = 0;
    private string Comment = "";
    private Fine? FineToEdit = null;
    private string ValidationErrorMessage = null;

    [Parameter] public EventCallback OnFineAdded { get; set; }
    [Parameter] public List<User> Users { get; set; } = new();

    public async Task Show(Fine? fine = null)
    {
        ValidationErrorMessage = null;
        FineToEdit = fine;
        await LoadUsers();

        if (FineToEdit is not null)
        {
            SelectedUserId = fine.UserId;
            Amount = fine.Amount;
            Comment = fine.Comment;
        }
        else
        {
            SelectedUserId = 0;
            Amount = 0;
            Comment = "";
        }

        showModal = true;
        StateHasChanged();
    }

    private void Close()
    {
        showModal = false;
        SelectedUserId = 0;
        Amount = 0;
        Comment = "";
        FineToEdit = null;
    }

    private async Task Submit()
    {
        // Manuelle tjek
        if (SelectedUserId <= 0)
        {
            ValidationErrorMessage = "Bruger er påkrævet.";
            return;
        }
        
        if (Amount <= 0)
        {
            ValidationErrorMessage = "Beløbet må ikke være 0.";
            return;
        }
        
        if (Amount > 500)
        {
            ValidationErrorMessage = "Beløbet må maks være på 500 kr.";
            return;
        }

        if (FineToEdit is not null)
        {
            FineToEdit.UserId = SelectedUserId;
            FineToEdit.Amount = Amount;
            FineToEdit.Comment = Comment;

            await FineService.Update(FineToEdit);
        }
        else
        {
            var fine = new Fine
            {
                UserId = SelectedUserId,
                Amount = Amount,
                Comment = Comment,
                Date = DateTime.Now,
                IsPaid = false
            };

            await FineService.Add(fine);
        }

        await OnFineAdded.InvokeAsync();
        Close();
    }
    
    private async Task LoadUsers()
    {
        Users = (await UserService.GetAll()).ToList();
    }
}
