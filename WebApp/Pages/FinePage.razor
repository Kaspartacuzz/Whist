@page "/bøder"
@using Core
@using WebApp.Service
@using WebApp.Service.AuthServices
@using WebApp.Service.FineServices
@using WebApp.Components

@inject IFineService FineService
@inject IUserService UserService
@inject IAuthService AuthService
@inject IJSRuntime JSRuntime

<!-- Tilføj knap -->
<div class="top-bar">
    <h2>Bøder</h2>
    <button class="btn-add" @onclick="OpenAddFineModal">+ Tilføj bøde</button>
</div>

<!-- Brugeroversigt -->
<div class="user-grid">
    @foreach (var user in Users)
    {
        var userFines = Fines.Where(f => f.UserId == user.Id).ToList();
        var total = userFines.Sum(f => f.Amount);
        var paid = userFines.Where(f => f.IsPaid).Sum(f => f.Amount);
        var unpaid = total - paid;

        <div class="user-card">
            <div class="star-button-wrapper">
                <button class="star-button" @onclick="() => AddStarFine(user.Id)">
                    ⭐
                    @if (GetStarCount(user.Id) > 0)
                    {
                        <span class="star-count">@GetStarCount(user.Id)</span>
                    }
                </button>
            </div>
            <div class="user-header">@user.NickName</div>
            <div class="user-info">
                <span>I alt:</span><span class="amount">@total kr</span>
                <span>Betalt:</span><span class="amount">@paid kr</span>
                <span>Mangler:</span>
                <span class="amount @(unpaid > 0 ? "text-red" : "text-green")">@unpaid kr</span>
            </div>

            @if (CurrentUser?.Id == user.Id && unpaid > 0)
            {
                <button class="pay-button" @onclick="PayNow">Betal nu</button>
            }
        </div>
    }
</div>

<!-- Samlet oversigt -->
<div class="overview-box">
    <div class="overview-title">Oversigt</div>
    <p>👉 <strong>Bøder i alt:</strong> @TotalAmount kr</p>
    <p>📊 <strong>Mangler at blive betalt:</strong> @TotalUnpaid kr</p>
</div>

<!-- Filtrering -->
<div class="filter-box-wrapper">
    <div class="filter-row">
        <div class="filter-item search">
            <span class="icon-search">🔍</span>
            <input placeholder="Søg i bøder..." @bind-value="searchTerm" @bind-value:event="oninput" />
        </div>

        <div class="filter-item date">
            <span class="icon-calendar">📅</span>
            <input type="date" @bind-value="filterFromDate" @bind-value:event="oninput" />
        </div>

        <div class="filter-item date">
            <span class="icon-calendar">📅</span>
            <input type="date" @bind-value="filterToDate" @bind-value:event="oninput" />
        </div>
    </div>

    <div class="filter-row">
        <div class="filter-item amount">
            <span class="icon-money">💰</span>
            <input type="number" placeholder="Min beløb" @bind-value="filterMinAmount" @bind-value:event="oninput" />
        </div>

        <div class="filter-item amount">
            <span class="icon-money">💰</span>
            <input type="number" placeholder="Max beløb" @bind-value="filterMaxAmount" @bind-value:event="oninput" />
        </div>

        <div class="filter-item dropdown">
            <label>Status:</label>
            <select class="filter-select" @bind="filterPaidStatus">
                <option value="">Alle</option>
                <option value="true">✅ Betalt</option>
                <option value="false">❌ Ikke betalt</option>
            </select>
        </div>
    </div>
</div>


<!-- Tabel -->
<div class="fine-table">
    <table>
        <thead>
        <tr>
            <th>Dato</th>
            <th>Navn</th>
            <th>Beløb</th>
            <th>Betalt</th>
            <th>Kommentar</th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var fine in FilteredFines)
        {
            var user = Users.FirstOrDefault(u => u.Id == fine.UserId);
            <tr>
                <td>@fine.Date.ToShortDateString()</td>
                <td>@user?.NickName</td>
                <td>@fine.Amount kr</td>
                <td>@(fine.IsPaid ? "✅" : "❌")</td>
                <td>@fine.Comment</td>
                <td>
                    @if (fine.UserId != CurrentUser?.Id)
                    {
                        <button class="icon-button blue" @onclick="() => EditFine(fine)">✏️</button>
                        <button class="icon-button red" @onclick="() => ConfirmDelete(fine)">🗑️</button>
                    }
                </td>
            </tr>
        }
        </tbody>
    </table>

    <ConfirmDeleteComponent @ref="confirmComponent"
                            OnConfirm="DeleteConfirmed"
                            OnCancel="CancelDelete"
                            Message="Er du sikker på at du vil slette denne bøde?" />
</div>

@if (TotalPages > 1)
{
    <PaginationComponent CurrentPage="CurrentPage"
                TotalPages="TotalPages"
                OnPageChanged="LoadPage" />
}

<AddFineComponent @ref="addFineComponent" OnFineAdded="ReloadFines" />

@code {
    private List<Fine> Fines = new();
    private List<User> Users = new();
    private string searchTerm = "";
    private User? CurrentUser;
    private AddFineComponent? addFineComponent;
    private ConfirmDeleteComponent? confirmComponent;
    private Fine? FineToDelete = null;
    private Dictionary<int, int> StarFineCounts = new(); // BrugerId → antal stjerner
    
    //Sidevisning for bøder (maks 10)
    private int CurrentPage = 1;
    private const int PageSize = 5; // altid 10
    private int TotalCount = 0;
    private int TotalPages => (int)Math.Ceiling((double)TotalCount / PageSize);
    
    //Filtreringer
    private DateTime? filterFromDate = null;
    private DateTime? filterToDate = null;
    private decimal? filterMinAmount = null;
    private decimal? filterMaxAmount = null;
    private string? filterPaidStatus = null; // "true", "false", eller null (alle)
    
    private decimal TotalAmount => Fines.Sum(f => f.Amount);
    private decimal TotalUnpaid => Fines.Where(f => !f.IsPaid).Sum(f => f.Amount);

    private IEnumerable<Fine> FilteredFines => Fines
        .Where(f =>
            // Søgefelt
            (string.IsNullOrWhiteSpace(searchTerm) ||
             Users.FirstOrDefault(u => u.Id == f.UserId)?.NickName?.ToLower().Contains(searchTerm.ToLower()) == true ||
             f.Comment.ToLower().Contains(searchTerm.ToLower()))

            // Datoer
            && (!filterFromDate.HasValue || f.Date.Date >= filterFromDate.Value.Date)
            && (!filterToDate.HasValue || f.Date.Date <= filterToDate.Value.Date)

            // Beløb
            && (!filterMinAmount.HasValue || f.Amount >= filterMinAmount.Value)
            && (!filterMaxAmount.HasValue || f.Amount <= filterMaxAmount.Value)

            // Betalt-status
            && (string.IsNullOrEmpty(filterPaidStatus) ||
                (filterPaidStatus == "true" && f.IsPaid) ||
                (filterPaidStatus == "false" && !f.IsPaid))
        )
        .OrderByDescending(f => f.Date);

    
    private decimal UserUnpaid =>
        CurrentUser is null
            ? 0
            : Fines.Where(f => f.UserId == CurrentUser.Id && !f.IsPaid).Sum(f => f.Amount);

    protected override async Task OnInitializedAsync()
    {
        Users = (await UserService.GetAll()).ToList();
        CurrentUser = await AuthService.GetCurrentUser();
        await LoadPage(1);
    }
    
    private async Task OpenAddFineModal()
    {
        if (addFineComponent != null)
            await addFineComponent.Show();
    }

    private async Task ReloadAllFines()
    {
        Fines = (await FineService.GetAll()).ToList();
        StateHasChanged();
    }
    
    private async Task PayNow()
    {
        if (CurrentUser is null)
            return;

        if (UserUnpaid <= 0)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Du har ingen ubetalte bøder – stærkt gået 💪");
            return;
        }

        // URL til mobilepay boks
        var mobilePayUrl = $"https://qr.mobilepay.dk/box/fe1b90f5-2c86-49be-af9f-8562d21a5b3a/pay-in";

        await JSRuntime.InvokeVoidAsync("open", mobilePayUrl, "_blank");

        // Marker som betalt
        foreach (var fine in Fines.Where(f => f.UserId == CurrentUser.Id && !f.IsPaid))
        {
            fine.IsPaid = true;
            await FineService.Update(fine);
        }

        await ReloadFines();
    }
    
    private void ConfirmDelete(Fine fine)
    {
        FineToDelete = fine;
        confirmComponent?.Show();
    }

    private async Task DeleteConfirmed()
    {
        if (FineToDelete is not null)
        {
            await FineService.Delete(FineToDelete.Id);
            FineToDelete = null;
            await ReloadFines();
        }
    }


    private void CancelDelete()
    {
        FineToDelete = null;
    }
    
    private async Task EditFine(Fine fine)
    {
        FineToDelete = null; // 🧹 vigtig!
    
        if (addFineComponent is not null)
            await addFineComponent.Show(fine);
    }
    
    private async Task AddStarFine(int userId)
    {
        var fine = new Fine
        {
            UserId = userId,
            Amount = 5,
            Comment = "Stjerne",
            Date = DateTime.Now,
            IsPaid = false
        };

        await FineService.Add(fine);
        await ReloadAllFines();
    }

    private int GetStarCount(int userId)
    {
        return Fines.Count(f => f.UserId == userId && f.Comment == "Stjerne" && !f.IsPaid);
    }
    
    private async Task LoadPage(int page)
    {
        CurrentPage = page < 1 ? 1 : page;
        var result = await FineService.GetPaged(CurrentPage, PageSize);
        Fines = result.Items.ToList();
        TotalCount = result.TotalCount;
        StateHasChanged();
    }

    private async Task GoPrev() { if (CurrentPage > 1) await LoadPage(CurrentPage - 1); }
    private async Task GoNext() { if (CurrentPage < TotalPages) await LoadPage(CurrentPage + 1); }
    private async Task GoTo(int page) { if (page >= 1 && page <= TotalPages) await LoadPage(page); }

    private async Task ReloadFines()
    {
        // bruges efter add/edit/delete
        if (Fines.Count == 1 && CurrentPage > 1)
            await LoadPage(CurrentPage - 1);
        else
            await LoadPage(CurrentPage);
        StateHasChanged();
    }
}

