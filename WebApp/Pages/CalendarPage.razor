@page "/kalender"
@using System.Globalization
@using Core
@using WebApp.Components

@inject IJSRuntime JS
@inject Service.CalendarServices.ICalendarService CalendarService
@inject Service.AuthServices.IAuthService AuthService

<h2>Kalender</h2>

<div class="calendar-controls">
    <button class="btn-add" @onclick="PreviousMonth">‚Üê</button>
    <div class="calendar-current">@CurrentMonthName @CurrentYear</div>
    <button class="btn-add" @onclick="NextMonth">‚Üí</button>
</div>

<div class="calendar-filters-styled">
    <div class="filter-item dropdown">
        <label class="filter-label">V√¶lg √•r:</label>
        <div class="filter-select-wrapper">
            <span class="icon-calendar">üìÖ</span>
            <select @bind="CurrentYear">
                @foreach (var year in YearRange)
                {
                    <option value="@year">@year</option>
                }
            </select>
        </div>
    </div>

    <div class="filter-item dropdown">
        <label class="filter-label">V√¶lg m√•ned:</label>
        <div class="filter-select-wrapper">
            <span class="icon-calendar">üìÖ</span>
            <select @bind="CurrentMonth">
                @for (int m = 1; m <= 12; m++)
                {
                    <option value="@m">@CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(m)</option>
                }
            </select>
        </div>
    </div>
</div>

<div class="calendar-grid">
    @foreach (var day in DayHeaders)
    {
        <div class="day-header">@day</div>
    }

    @for (int i = 0; i < LeadingEmptyDays; i++)
    {
        <div class="day-cell empty"></div>
    }

    @for (int day = 1; day <= DaysInMonth; day++)
    {
        var date = new DateTime(CurrentYear, CurrentMonth, day);
        var isToday = date.Date == DateTime.Today;
        var cellClass = isToday ? "day-cell today" : "day-cell";

        <div class="@cellClass" @onclick="@(CurrentUser is not null ? (() => SelectDate(date)) : null)">
            <div class="day-number">@day</div>
            @if (EventDates.TryGetValue(date.Date, out var note))
            {
                <div class="event-note">@note</div>
            }
        </div>
    }
</div>

@if (ShowNoteModal && SelectedDate.HasValue && CurrentUser is not null)
{
    <div class="modal-backdrop">
        <div class="modal-container">
            <h3 class="modal-title">
                @SelectedDate.Value.ToString("d. MMMM yyyy", new CultureInfo("da-DK"))
            </h3>
            
            <textarea id="noteText"
                      class="modal-input"
                      rows="4"
                      @bind="NewNote"
                      placeholder="Skriv note eller begivenhed her..."></textarea>

            <div class="modal-actions">
                <button class="modal-btn primary" @onclick="SaveNote">
                    @(EventDates.ContainsKey(SelectedDate.Value.Date) ? "Gem √¶ndringer" : "Tilf√∏j til kalender")
                </button>

                @if (EventDates.ContainsKey(SelectedDate.Value.Date))
                {
                    <button class="modal-btn danger" @onclick="() => RequestDelete(SelectedDate.Value)">Slet</button>
                }

                <button class="modal-btn cancel" @onclick="CloseModal">Annuller</button>
            </div>
        </div>
    </div>
}

@if (PastEvents.Any() || UpcomingEvents.Any())
{
    <div class="event-tables-wrapper">
        <!-- Tidligere begivenheder -->
        <div class="fine-table">
            <h3>üïò Tidligere begivenheder</h3>
            @if (PastEvents.Any())
            {
                <table>
                    <thead>
                        <tr>
                            <th>Dato</th>
                            <th>Note</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var evt in PastEvents)
                        {
                            <tr>
                                <td>@evt.Key.ToString("dd.MM.yyyy")</td>
                                <td>@evt.Value</td>
                                <td>
                                    <button class="icon-button blue" @onclick="() => EditEvent(evt.Key)">‚úèÔ∏è</button>
                                    <button class="icon-button red" @onclick="() => RequestDelete(evt.Key)">üóëÔ∏è</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p>Ingen tidligere begivenheder.</p>
            }
        </div>

        <!-- Kommende begivenheder -->
        <div class="fine-table">
            <h3>üìÖ Kommende begivenheder</h3>
            @if (UpcomingEvents.Any())
            {
                <table>
                    <thead>
                        <tr>
                            <th>Dato</th>
                            <th>Note</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var evt in UpcomingEvents)
                        {
                            <tr>
                                <td>@evt.Key.ToString("dd.MM.yyyy")</td>
                                <td>@evt.Value</td>
                                <td>
                                    <button class="icon-button blue" @onclick="() => EditEvent(evt.Key)">‚úèÔ∏è</button>
                                    <button class="icon-button red" @onclick="() => RequestDelete(evt.Key)">üóëÔ∏è</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p>Ingen kommende begivenheder.</p>
            }
        </div>
    </div>
}

<!-- Bekr√¶ft sletning komponent -->
<ConfirmDeleteComponent @ref="confirmComponent"
                        OnConfirm="DeleteConfirmed"
                        OnCancel="CancelDelete"
                        Message="Er du sikker p√• at du vil slette denne begivenhed?" />

@code {
    private DateTime? SelectedDate;
    private DateTime dateToDelete;
    private string NewNote = "";
    private bool ShowNoteModal = false;
    private int idToDelete; // ‚Üê nyt felt til sletning med ID

    private Dictionary<DateTime, string> EventDates = new();
    private ConfirmDeleteComponent? confirmComponent;

    private int currentYear = DateTime.Today.Year;
    private int currentMonth = DateTime.Today.Month;
    private User? CurrentUser;

    private IEnumerable<KeyValuePair<DateTime, string>> UpcomingEvents =>
        EventDates.Where(e => e.Key >= DateTime.Today).OrderBy(e => e.Key);

    private IEnumerable<KeyValuePair<DateTime, string>> PastEvents =>
        EventDates.Where(e => e.Key < DateTime.Today).OrderByDescending(e => e.Key);

    private int CurrentYear
    {
        get => currentYear;
        set
        {
            if (currentYear != value)
            {
                currentYear = value;
                _ = LoadEvents();
            }
        }
    }

    private int CurrentMonth
    {
        get => currentMonth;
        set
        {
            if (currentMonth != value)
            {
                currentMonth = value;
                _ = LoadEvents();
            }
        }
    }

    private int DaysInMonth => DateTime.DaysInMonth(CurrentYear, CurrentMonth);
    private int LeadingEmptyDays => ((int)new DateTime(CurrentYear, CurrentMonth, 1).DayOfWeek + 6) % 7;
    private string CurrentMonthName => CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(CurrentMonth);
    private string[] DayHeaders => new[] { "Man", "Tir", "Ons", "Tor", "Fre", "L√∏r", "S√∏n" };
    private List<int> YearRange = Enumerable.Range(DateTime.Today.Year - 5, 56).ToList();
    private List<Core.Calendar> AllEvents = new();

    protected override async Task OnInitializedAsync()
    {
        CurrentUser = await AuthService.GetCurrentUser();
        await LoadEvents();
    }

    private async Task LoadEvents()
    {
        var allEvents = await CalendarService.GetAll();
        AllEvents = allEvents;
        EventDates = AllEvents.ToDictionary(e => e.Date.Date, e => e.Note);
        StateHasChanged();
    }

    private void SelectDate(DateTime date)
    {
        if (CurrentUser is null)
            return;

        SelectedDate = date;
        NewNote = EventDates.TryGetValue(date.Date, out var note) ? note : "";
        ShowNoteModal = true;
    }

    private async Task SaveNote()
    {
        if (SelectedDate.HasValue)
        {
            var calendar = new Core.Calendar
            {
                Date = SelectedDate.Value.Date,
                Note = NewNote
            };

            await CalendarService.Save(calendar);
            EventDates[calendar.Date] = calendar.Note;

            NewNote = "";
            SelectedDate = null;
            ShowNoteModal = false;
        }
    }

    private void CloseModal()
    {
        SelectedDate = null;
        NewNote = "";
        ShowNoteModal = false;
    }

    private async Task PreviousMonth()
    {
        if (CurrentMonth == 1)
        {
            CurrentMonth = 12;
            CurrentYear--;
        }
        else
        {
            CurrentMonth--;
        }
        await LoadEvents();
    }

    private async Task NextMonth()
    {
        if (CurrentMonth == 12)
        {
            CurrentMonth = 1;
            CurrentYear++;
        }
        else
        {
            CurrentMonth++;
        }
        await LoadEvents();
    }

    private void EditEvent(DateTime date)
    {
        SelectDate(date);
    }

    private void RequestDelete(DateTime date)
    {
        // Find det matchende kalender-event (du skal gemme en liste over events)
        var calendar = AllEvents.FirstOrDefault(e => e.Date.Date == date.Date);
        if (calendar != null)
        {
            idToDelete = calendar.Id;
            dateToDelete = calendar.Date;
            confirmComponent?.Show();
        }
    }

    private async Task DeleteConfirmed()
    {
        await CalendarService.Delete(idToDelete);
        EventDates.Remove(dateToDelete);

        if (SelectedDate == dateToDelete)
        {
            SelectedDate = null;
            NewNote = "";
            ShowNoteModal = false;
        }

        await LoadEvents(); // ‚Üê vigtigt at hente data igen
    }

    private void CancelDelete()
    {
        dateToDelete = default;
    }
}
