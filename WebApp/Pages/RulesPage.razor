@page "/regler"
@using Core
@using WebApp.Components
@using WebApp.Service.RuleServices
@inject IRuleService RuleService
@inject Service.AuthServices.IAuthService AuthService

<div class="page-header">
    <h2>Regler</h2>
    @if (CurrentUser is not null)
    {
        <div class="rules-actions">
            <button class="btn-add" @onclick="OpenAddModal">+ Opret regel</button>
            <button class="btn-add" @onclick="ToggleEditMode">
                @(editMode ? "Afslut redigering" : "Rediger regler")
            </button>
        </div>
    }
    
</div>

<AddRuleComponent @ref="addRuleComponent" OnRuleSaved="LoadRules" />
<ConfirmDeleteComponent @ref="confirmDeleteComponent"
                        OnConfirm="DeleteConfirmed"
                        OnCancel="CancelDelete"
                        Message="Er du sikker p√• at du vil slette denne regel?" />


@if (Rules.Count == 0)
{
    <p>Ingen regler endnu...</p>
}
else
{
    <div class="rules-list clean">
        @foreach (var rule in Rules.OrderBy(r => r.Id))
        {
            <div class="rule-line">
                <div class="rule-left">
                    <div class="rule-badge">@rule.Id</div>
                    <div class="rule-text">@rule.Text</div>
                </div>

                @if (editMode)
                {
                    <div class="actions">
                        <button class="icon-button blue" title="Redig√©r" @onclick="() => EditRule(rule)">‚úèÔ∏è</button>
                        <button class="icon-button red" title="Slet" @onclick="() => ConfirmDelete(rule)">üóëÔ∏è</button>
                    </div>
                }
            </div>
        }
    </div>
}


@code {
    private List<Rule> Rules = new();
    private AddRuleComponent? addRuleComponent;
    private bool editMode = false;
    private ConfirmDeleteComponent? confirmDeleteComponent;
    private Rule? RuleToDelete;
    private User? CurrentUser;

    protected override async Task OnInitializedAsync()
    {
        CurrentUser = await AuthService.GetCurrentUser();
        await LoadRules();
    }

    private async Task LoadRules()
    {
        Rules = await RuleService.GetAll();
    }

    private void OpenAddModal()
    {
        addRuleComponent?.Show();
    }
    
    private void ToggleEditMode()
    {
        editMode = !editMode;
    }

    private void EditRule(Rule rule)
    {
        addRuleComponent?.Show(rule);
    }

    private void ConfirmDelete(Rule rule)
    {
        RuleToDelete = rule;
        confirmDeleteComponent?.Show();
    }

    private async Task DeleteConfirmed()
    {
        if (RuleToDelete is not null)
        {
            await RuleService.Delete(RuleToDelete.Id);
            RuleToDelete = null;
            await LoadRules();
        }
    }

    private void CancelDelete()
    {
        RuleToDelete = null;
    }
}