@page "/users"

@using Core
@using WebApp.Components
@using WebApp.Service
@using WebApp.Service.AuthServices
@using WebApp.Service.FineServices
@inject IUserService UserService
@inject IFineService FineService
@inject IAuthService AuthService

<h2>Medlemmer</h2>

<!-- Knappen til at åbne opret-bruger-modal -->
@if (CurrentUser is not null)
{
    <button @onclick="OpenAddUserModal">Tilføj bruger</button>
}
<AddUserComponent @ref="addUserComponent" OnUserAdded="ReloadUsers" />

<!-- Bokse med info om alle brugere -->
<div class="user-boxes">
    @foreach (var user in Users)
    {
        var totalFines = user.Fines?.Sum(f => f.Amount) ?? 0;

        <div class="user-box" style="border: 1px solid gray; padding: 15px; margin-bottom: 10px;">
            <h3>@user.NickName</h3>

            @if (!string.IsNullOrEmpty(user.ImageUrl))
            {
                <img src="@user.ImageUrl" alt="Billede af @user.NickName" width="150" />
            }

            <p><strong>Fulde navn:</strong> @user.Name</p>
            <p><strong>Beskrivelse:</strong> @user.Description</p>
            <p><strong>Fun fact:</strong> @user.FunFact</p>
            <p><strong>Samlet antal bøder:</strong> @totalFines kr</p>
            
            @if (CurrentUser is not null)
            {
                <button @onclick="() => EditUser(user)">Rediger</button>
                <button @onclick="() => ConfirmDeleteUser(user)">Slet</button>
            }
        </div>
    }
</div>

<ConfirmDeleteComponent @ref="confirmDeleteComponent"
                        OnConfirm="DeleteConfirmed"
                        OnCancel="CancelDelete"
                        Message="Er du sikker på at du vil slette denne bruger?" />

@code {
    private List<User> Users = new();
    private AddUserComponent? addUserComponent;
    private User? CurrentUser;
    private User? UserToDelete = null;
    private ConfirmDeleteComponent? confirmDeleteComponent;

    protected override async Task OnInitializedAsync()
    {
        CurrentUser = await AuthService.GetCurrentUser();
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        Users = (await UserService.GetAll()).ToList();
    }

    private async Task ReloadUsers()
    {
        await LoadUsers();
        StateHasChanged();
    }

    private void OpenAddUserModal()
    {
        addUserComponent?.Show();
    }
    
    private async Task EditUser(User user)
    {
        if (addUserComponent is not null)
            await addUserComponent.Show(user);
    }

    private void ConfirmDeleteUser(User user)
    {
        UserToDelete = user;
        confirmDeleteComponent?.Show();
    }

    private async Task DeleteConfirmed()
    {
        if (UserToDelete is not null)
        {
            await UserService.Delete(UserToDelete.Id);
            UserToDelete = null;
            await ReloadUsers();
        }
    }

    private void CancelDelete()
    {
        UserToDelete = null;
    }
}
