@page "/medlemmer"

@using Core
@using WebApp.Components
@using WebApp.Service
@using WebApp.Service.AuthServices
@using WebApp.Service.FineServices
@inject IUserService UserService
@inject IFineService FineService
@inject IAuthService AuthService

<div class="top-bar">
    <h2>Medlemmer</h2>

    @if (CurrentUser is not null)
    {
        <button class="btn-add" @onclick="OpenAddUserModal">
            + Tilf√∏j medlem
        </button>
    }
</div>
<AddUserComponent @ref="addUserComponent" OnUserAdded="ReloadUsers" />

<div class="page-container">
    @foreach (var user in Users)
    {
        <div class="user-card">
            <!-- Venstre kolonne: billede og info -->
            <div class="user-left">
                @if (!string.IsNullOrEmpty(user.ImageUrl))
                {
                    <img class="user-image" src="@user.ImageUrl" alt="Billede af @user.NickName" />
                }

                <div class="user-name"><strong>@user.Name</strong></div>
                <div class="user-nickname">"@user.NickName"</div>

                @if (CurrentUser is not null)
                {
                    <div class="user-contact">
                        <div><i class="bi bi-envelope"></i> @user.Email</div>
                        <div><i class="bi bi-telephone"></i> @user.PhoneNumber</div>
                        <div><i class="bi bi-geo-alt"></i> @user.Address</div>
                    </div>
                }
            </div>

            <!-- H√∏jre kolonne: beskrivelse, fun fact, knapper -->
            <div class="user-right">
                @if (!string.IsNullOrEmpty(user.FunFact))
                {
                    <div class="fun-fact">
                        <i class="fa fa-comment-dots"></i>
                        <div>
                            <strong>Fun Fact</strong><br />
                            @user.FunFact
                        </div>
                    </div>
                }

                <div class="about-section">
                    <h4>Om @user.NickName</h4>
                    <p>@user.Description</p>
                </div>
                
                <div class="content-footer">
                    <div class="author">
                    </div>

                    @if (CurrentUser is not null)
                    {
                        <div class="actions">
                            <button class="icon-button blue" title="Redig√©r" @onclick="() => EditUser(user)">‚úèÔ∏è</button>
                            <button class="icon-button red" title="Slet" @onclick="() => ConfirmDeleteUser(user)">üóëÔ∏è</button>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
</div>

<ConfirmDeleteComponent @ref="confirmDeleteComponent"
                        OnConfirm="DeleteConfirmed"
                        OnCancel="CancelDelete"
                        Message="Er du sikker p√• at du vil slette denne bruger?" />


@code {
    private List<User> Users = new();
    private AddUserComponent? addUserComponent;
    private User? CurrentUser;
    private User? UserToDelete = null;
    private ConfirmDeleteComponent? confirmDeleteComponent;

    protected override async Task OnInitializedAsync()
    {
        CurrentUser = await AuthService.GetCurrentUser();
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        Users = (await UserService.GetAll()).ToList();
    }

    private async Task ReloadUsers()
    {
        await LoadUsers();
        StateHasChanged();
    }

    private void OpenAddUserModal()
    {
        addUserComponent?.Show();
    }
    
    private async Task EditUser(User user)
    {
        if (addUserComponent is not null)
            await addUserComponent.Show(user);
    }

    private void ConfirmDeleteUser(User user)
    {
        UserToDelete = user;
        confirmDeleteComponent?.Show();
    }

    private async Task DeleteConfirmed()
    {
        if (UserToDelete is not null)
        {
            await UserService.Delete(UserToDelete.Id);
            UserToDelete = null;
            await ReloadUsers();
        }
    }

    private void CancelDelete()
    {
        UserToDelete = null;
    }
}
