@page "/highlights"

@using Core
@using WebApp.Components
@using WebApp.Service
@inject Service.HighlightServices.IHighlightService HighlightService
@inject Service.AuthServices.IAuthService AuthService
@inject IUserService UserService

<div class="page-header">
    <h2>Highlights</h2>
    @if (CurrentUser is not null)
    {
        <button class="btn-add" @onclick="OpenAddModal">
            + Tilf√∏j highlight
        </button>
    }
</div>

<AddHighlightComponent @ref="addComponent" OnHighlightAdded="LoadHighlights" />

<!-- üîç Filtrering -->
<div class="filter-box">
    <div class="filter-item search">
        <span class="icon-search">üîç</span>
        <input placeholder="S√∏g i highlights..."
               @bind="searchTerm"
               @bind:event="oninput" />
    </div>

    <div class="filter-item date">
        <span class="icon-calendar">üìÖ</span>
        <input type="date"
               @bind="filterFrom" />
    </div>

    <div class="filter-item date">
        <span class="icon-calendar">üìÖ</span>
        <input type="date"
               @bind="filterTo" />
    </div>
</div>

<!-- üìú Liste af highlights -->
<div class="highlight-list">
    @foreach (var h in FilteredHighlights)
    {
        if (h.IsPrivate && CurrentUser is null)
        {
            continue;
        }
        var user = Users.FirstOrDefault(u => u.Id == h.UserId);

        <div class="highlight-card">
            <div class="card-image">
                @if (!string.IsNullOrEmpty(h.ImageUrl))
                {
                    <img src="@h.ImageUrl" alt="Highlight billede" />
                }
                else
                {
                    <div class="image-placeholder">Intet billede</div>
                }
            </div>

            <div class="card-content">
                <div class="content-header">
                    <h3>@h.Title</h3>
                    <span class="card-date">
                        @h.Date.ToString("d. MMMM yyyy", 
                            System.Globalization.CultureInfo.GetCultureInfo("da-DK"))
                    </span>
                </div>

                <p class="description">@h.Description</p>

                <div class="content-footer">
                    <div class="author">
                    </div>

                    @if (CurrentUser is not null)
                    {
                        <div class="actions">
                            <button class="icon-button blue" title="Redig√©r" @onclick="() => EditHighlight(h)">‚úèÔ∏è</button>
                            <button class="icon-button red" title="Slet" @onclick="() => ConfirmDelete(h)">üóëÔ∏è</button>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
</div>

<ConfirmDeleteComponent @ref="confirmComponent"
                        OnConfirm="DeleteConfirmed"
                        OnCancel="CancelDelete"
                        Message="Er du sikker p√• at du vil slette dette highlight?" />


@code {
    private List<Highlight> Highlights = new();
    private List<User> Users = new();
    private string searchTerm = "";
    private DateTime? filterFrom = null;
    private DateTime? filterTo = null;
    private User? CurrentUser;

    private AddHighlightComponent? addComponent;

    private IEnumerable<Highlight> FilteredHighlights => Highlights
        .Where(h =>
            (string.IsNullOrWhiteSpace(searchTerm)
             || h.Title.ToLower().Contains(searchTerm.ToLower())
             || h.Description.ToLower().Contains(searchTerm.ToLower()))
            && (!filterFrom.HasValue || h.Date.Date >= filterFrom.Value.Date)
            && (!filterTo.HasValue || h.Date.Date <= filterTo.Value.Date)
        )
        .OrderByDescending(h => h.Date);

    protected override async Task OnInitializedAsync()
    {
        CurrentUser = await AuthService.GetCurrentUser();
        await LoadHighlights();
    }

    private async Task LoadHighlights()
    {
        Highlights = (await HighlightService.GetAll()).ToList();
        Users = (await UserService.GetAll()).ToList();
    }

    private async Task OpenAddModal()
    {
        if (addComponent is not null)
            addComponent.Show();
    }
    
    private ConfirmDeleteComponent? confirmComponent;
    private Highlight? HighlightToDelete;

    private void ConfirmDelete(Highlight highlight)
    {
        HighlightToDelete = highlight;
        confirmComponent?.Show();
    }

    private async Task DeleteConfirmed()
    {
        if (HighlightToDelete is not null)
        {
            await HighlightService.Delete(HighlightToDelete.Id);
            HighlightToDelete = null;
            await LoadHighlights(); // Genindl√¶s
        }
    }

    private void CancelDelete()
    {
        HighlightToDelete = null;
    }
    
    private async Task EditHighlight(Highlight h)
    {
        addComponent?.Show(h);
    }
}