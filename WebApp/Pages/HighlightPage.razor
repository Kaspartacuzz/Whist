@page "/highlights"

@using Core
@using WebApp.Components
@using WebApp.Service
@inject Service.HighlightServices.IHighlightService HighlightService
@inject Service.AuthServices.IAuthService AuthService
@inject IUserService UserService

<div class="page-header">
    <h2>Highlights</h2>
    @if (CurrentUser is not null)
    {
        <button class="btn-add" @onclick="OpenAddModal">
            + Tilf√∏j highlight
        </button>
    }
</div>

<AddHighlightComponent @ref="addComponent" OnHighlightAdded="LoadHighlights" />

<!-- üîç Filtrering -->
<div class="filter-box">
    <div class="filter-item search">
        <span class="icon-search">üîç</span>
        <input placeholder="S√∏g i highlights..."
               @bind="searchTerm"
               @bind:event="oninput" />
    </div>

    <div class="filter-item date">
        <span class="icon-calendar">üìÖ</span>
        <input type="date"
               @bind="filterFrom" />
    </div>

    <div class="filter-item date">
        <span class="icon-calendar">üìÖ</span>
        <input type="date"
               @bind="filterTo" />
    </div>
</div>

<div class="highlight-grid">
    @foreach (var h in FilteredHighlights)
    {
        if (h.IsPrivate && CurrentUser is null)
        {
            continue;
        }

        <div class="highlight-card">
            @if (!string.IsNullOrEmpty(h.ImageUrl))
            {
                <div class="highlight-image">
                    <img src="@h.ImageUrl" alt="Highlight billede" />
                    <button class="expand-button" title="Se i stor st√∏rrelse" @onclick="() => OpenImageModal(h.ImageUrl)">
                        ‚õ∂
                    </button>
                </div>
            }

            <div class="highlight-body">
                <div class="highlight-title-row">
                    <h3 class="title">@h.Title</h3>

                    @if (h.IsPrivate)
                    {
                        <span class="highlight-private-label">Privat</span>
                    }
                </div>
                <p class="description">@h.Description</p>

                <div class="highlight-footer">
                    <span class="card-date">@(
                                            TimeZoneInfo.ConvertTimeFromUtc(h.Date, TimeZoneInfo.FindSystemTimeZoneById("Europe/Copenhagen"))
                                                .ToString("d. MMMM yyyy", new System.Globalization.CultureInfo("da-DK")))
                        </span>

                    @if (CurrentUser is not null)
                    {
                        <div class="actions">
                            <button class="icon-button blue" title="Redig√©r" @onclick="() => EditHighlight(h)">‚úèÔ∏è</button>
                            <button class="icon-button red" title="Slet" @onclick="() => ConfirmDelete(h)">üóëÔ∏è</button>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
</div>

<ConfirmDeleteComponent @ref="confirmComponent"
                        OnConfirm="DeleteConfirmed"
                        OnCancel="CancelDelete"
                        Message="Er du sikker p√• at du vil slette dette highlight?" />

@if (ExpandedImageUrl is not null)
{
    <div class="image-modal-backdrop" @onclick="CloseImageModal">
        <div class="image-modal-content" @onclick:stopPropagation>
            <button class="close-button" @onclick="CloseImageModal">x</button>
            <img src="@ExpandedImageUrl" alt="Udvidet billede" />
        </div>
    </div>
}

@if (TotalPages > 1)
{
    <PaginationComponent CurrentPage="CurrentPage"
                TotalPages="TotalPages"
                OnPageChanged="LoadPage" />
}


@code {
    private List<Highlight> Highlights = new();
    private List<User> Users = new();
    private string searchTerm = "";
    private DateTime? filterFrom = null;
    private DateTime? filterTo = null;
    private User? CurrentUser;
    private string? ExpandedImageUrl;
    private int CurrentPage = 1;
    private const int PageSize = 6; // altid 6
    private int TotalCount = 0;
    private int TotalPages => (int)Math.Ceiling((double)TotalCount / PageSize);

    private AddHighlightComponent? addComponent;

    private IEnumerable<Highlight> FilteredHighlights => Highlights
        .Where(h =>
            (string.IsNullOrWhiteSpace(searchTerm)
             || h.Title.ToLower().Contains(searchTerm.ToLower())
             || h.Description.ToLower().Contains(searchTerm.ToLower()))
            && (!filterFrom.HasValue || h.Date.Date >= filterFrom.Value.Date)
            && (!filterTo.HasValue || h.Date.Date <= filterTo.Value.Date)
        )
        .OrderByDescending(h => h.Date);

    protected override async Task OnInitializedAsync()
    {
        CurrentUser = await AuthService.GetCurrentUser();
        await LoadPage(1);
    }

    private async Task LoadHighlights()
    {
        Highlights = (await HighlightService.GetAll()).ToList();
        Users = (await UserService.GetAll()).ToList();
    }

    private async Task OpenAddModal()
    {
        if (addComponent is not null)
            addComponent.Show();
    }
    
    private ConfirmDeleteComponent? confirmComponent;
    private Highlight? HighlightToDelete;

    private void ConfirmDelete(Highlight highlight)
    {
        HighlightToDelete = highlight;
        confirmComponent?.Show();
    }

    private async Task DeleteConfirmed()
    {
        if (HighlightToDelete is not null)
        {
            await HighlightService.Delete(HighlightToDelete.Id);
            HighlightToDelete = null;
            await LoadHighlights(); // Genindl√¶s
        }
    }

    private void CancelDelete()
    {
        HighlightToDelete = null;
    }
    
    private async Task EditHighlight(Highlight h)
    {
        addComponent?.Show(h);
    }
    
    private void OpenImageModal(string url)
    {
        ExpandedImageUrl = url;
    }

    private void CloseImageModal()
    {
        ExpandedImageUrl = null;
    }
    
    private async Task LoadPage(int page)
    {
        CurrentPage = page < 1 ? 1 : page;
        var result = await HighlightService.GetPaged(CurrentPage, PageSize);
        Highlights = result.Items.ToList();
        TotalCount = result.TotalCount;
        StateHasChanged();
    }

    private async Task GoPrev() { if (CurrentPage > 1) await LoadPage(CurrentPage - 1); }
    private async Task GoNext() { if (CurrentPage < TotalPages) await LoadPage(CurrentPage + 1); }
    private async Task GoTo(int page) { if (page >= 1 && page <= TotalPages) await LoadPage(page); }

    private async Task ReloadHighlights()
    {
        if (Highlights.Count == 1 && CurrentPage > 1)
            await LoadPage(CurrentPage - 1);
        else
            await LoadPage(CurrentPage);
    }
}